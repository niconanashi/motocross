"use strict";
var Prompt = require("prompt");
var commons = require("@akashic/akashic-cli-commons");
/**
 * ユーザ入力で `BasicParameters` を取得する。
 */
function promptGetBasicParameters(current) {
    var schema = {
        properties: {
            width: {
                type: "number",
                message: "width must be a number",
                default: current.width || 320
            },
            height: {
                type: "number",
                message: "height must be a number",
                default: current.height || 320
            },
            fps: {
                type: "number",
                message: "fps must be a number",
                default: current.fps || 30
            }
        }
    };
    return new Promise(function (resolve, reject) {
        Prompt.start();
        Prompt.get(schema, function (err, result) {
            Prompt.stop();
            if (!err)
                err = validateBasicParameters(result, schema.properties);
            if (err) {
                reject(err);
            }
            else {
                resolve(result);
            }
        });
    });
}
/**
 * basicParameter 値の妥当性チェック。
 * schema.properties.type と値の型が一致するかチェックする。
 *
 * @param params {object}
 * @param props {object}
 */
function validateBasicParameters(params, props) {
    var errMessage = "";
    Object.keys(params).forEach(function (key) {
        if (errMessage || !params.hasOwnProperty(key) || !props.hasOwnProperty(key))
            return;
        if (props[key].type === "number") {
            // type　が　number　の場合で、値が NaN or null の場合、エラーとする
            if (isNaN(params[key]) || params[key] === null)
                errMessage = props[key].message;
        }
    });
    return errMessage;
}
/**
 * game.json に BasicParameters の内容をセットする。
 */
function setBasicParameters(conf, basicParams) {
    conf.width = basicParams.width;
    conf.height = basicParams.height;
    conf.fps = basicParams.fps;
}
/**
 * 指定した game.json の基本パラメータを更新する
 */
function updateConfigurationFile(confPath, logger) {
    return commons.ConfigurationFile.read(confPath, logger)
        .then(function (conf) {
        return promptGetBasicParameters({
            width: conf.width,
            height: conf.height,
            fps: conf.fps
        })
            .then(function (basicParams) {
            setBasicParameters(conf, basicParams);
            return commons.ConfigurationFile.write(conf, confPath, logger);
        });
    });
}
exports.updateConfigurationFile = updateConfigurationFile;
//# sourceMappingURL=BasicParameters.js.map