"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t;
    return { next: verb(0), "throw": verb(1), "return": verb(2) };
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var downloadTemplate_1 = require("./downloadTemplate");
var path = require("path");
var os = require("os");
var fs = require("fs");
function extractZipIfNeeded(param) {
    return __awaiter(this, void 0, void 0, function () {
        var ignoreTypes, temporaryPath, buffer;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    ignoreTypes = fs.readdirSync(path.resolve(__dirname, "..", "templates"))
                        .filter(function (name) { return path.extname(name) === ".zip"; })
                        .map(function (name) { return path.basename(name, path.extname(name)); });
                    if (ignoreTypes.indexOf(param.type) === -1) {
                        param._realTemplateDirectory = param.localTemplateDirectory;
                        return [2 /*return*/];
                    }
                    temporaryPath = fs.mkdtempSync(path.join(os.tmpdir(), param.type));
                    param._realTemplateDirectory = temporaryPath;
                    return [4 /*yield*/, downloadTemplate_1.getFactoryTemplate(param)];
                case 1:
                    buffer = _a.sent();
                    return [4 /*yield*/, downloadTemplate_1.promisedExtract(buffer, path.join(param._realTemplateDirectory, param.type))];
                case 2:
                    _a.sent();
                    return [4 /*yield*/, showMessageIfNeeded(param, ignoreTypes)];
                case 3:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
exports.extractZipIfNeeded = extractZipIfNeeded;
function showMessageIfNeeded(param, ignoreTypes) {
    return new Promise(function (resolve, reject) {
        var templatePath = path.join(param.localTemplateDirectory, param.type);
        fs.stat(templatePath, function (err, stats) {
            if (err) {
                if (err.code === "ENOENT")
                    return resolve();
                return reject(err);
            }
            var message = [
                "The local cache for a template type '" + param.type + "' found on " + templatePath + ".",
                "The cache, probably created by old akashic-cli, is ignored. ",
                "Current akashic-cli only uses built-in templates for type " + ignoreTypes.toString(),
                "If you want to use " + templatePath + ", rename template directory from " + param.type + " ",
                "to something other than " + ignoreTypes.toString() + " , and run:",
                "  $ akashic init --type renamed-your-template-name",
                "",
                "Or if you want only hide this message, remove " + templatePath + ".",
                ""
            ].join("\n");
            param.logger.print(message);
            resolve();
        });
    });
}
//# sourceMappingURL=extractZipIfNeeded.js.map