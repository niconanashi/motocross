"use strict";
var fs = require("fs");
var path = require("path");
var downloadTemplate_1 = require("./downloadTemplate");
var InitParameterObject_1 = require("./InitParameterObject");
/**
 * サーバに存在するテンプレート一覧を表示
 */
function listTemplates(param) {
    var templates = [];
    return InitParameterObject_1.completeInitParameterObject(param)
        .then(function () { return promisedReaddir(path.resolve(__dirname, "..", "templates")); })
        .then(function (result) {
        templates = result.filter(function (filename) { return (path.extname(filename) === ".zip"); })
            .map(function (filename) { return path.basename(filename, path.extname(filename)); });
        param._realTemplateDirectory = param.localTemplateDirectory;
    })
        .then(function () { return promisedReaddir(param._realTemplateDirectory); })
        .then(function (localTemplates) {
        templates = templates.concat(localTemplates);
    })
        .catch(function (err) {
        if (err.code !== "ENOENT")
            throw err;
    })
        .then(function () {
        if (param.repository) {
            return Promise.resolve()
                .then(function () { return downloadTemplate_1.getTemplateNameList(param); })
                .then(function (templateList) {
                templates = templates.concat(templateList);
            });
        }
        else {
            return Promise.resolve();
        }
    })
        .then(function () {
        (new Set(templates)).forEach(function (t) { return param.logger.print(t); });
    });
}
exports.listTemplates = listTemplates;
function promisedReaddir(dir) {
    return new Promise(function (resolve, reject) {
        fs.readdir(dir, function (err, files) {
            if (err)
                return reject(err);
            resolve(files);
        });
    });
}
//# sourceMappingURL=listTemplates.js.map