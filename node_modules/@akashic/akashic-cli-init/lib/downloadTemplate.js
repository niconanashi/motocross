"use strict";
var request = require("request");
var unzip = require("unzip");
var fs = require("fs");
var path = require("path");
function getTemplateNameList(param) {
    return getTemplateListJson(param)
        .then(function (templateList) {
        return Object.keys(templateList.templates);
    });
}
exports.getTemplateNameList = getTemplateNameList;
/**
 * TemplateListJson をダウンロードする
 */
function getTemplateListJson(param) {
    var jsonUri = param.repository + param.templateListJsonPath;
    param.logger.info("access to " + jsonUri);
    return promisedRequest({
        uri: jsonUri,
        method: "GET",
        json: true
    });
}
/**
 * テンプレートのzipファイルをダウンロードして展開する
 */
function downloadTemplate(param) {
    return new Promise(function (resolve, reject) {
        if (!param.repository) {
            return reject(null); // リポジトリを利用しない場合
        }
        return resolve();
    })
        .then(function () { return getTemplateListJson(param); })
        .then(function (jsonFile) {
        if (!jsonFile.templates[param.type]) {
            return Promise.reject(new Error("server doesn't have template: " + param.type));
        }
        var templateUri = param.repository + jsonFile.templates[param.type];
        return Promise.resolve()
            .then(function () { return promisedRequest({
            uri: templateUri,
            method: "GET",
            encoding: null
        }); })
            .then(function (buf) { return promisedExtract(buf, path.join(param._realTemplateDirectory, param.type)); });
    })
        .catch(function (err) {
        param.logger.warn(err);
        param.logger.info("using built-in template");
    });
}
function getFactoryTemplate(param) {
    return new Promise(function (resolve, reject) {
        var templatePath = path.resolve(__dirname, "..", "templates", param.type + ".zip");
        fs.readFile(templatePath, function (err, data) {
            if (err) {
                reject(err);
                return;
            }
            resolve(data);
        });
    });
}
exports.getFactoryTemplate = getFactoryTemplate;
function promisedRequest(param) {
    return new Promise(function (resolve, reject) {
        request(param, function (err, res, body) {
            if (err) {
                reject(err);
                return;
            }
            if (res.statusCode !== 200) {
                reject(new Error("download failed: code = " + res.code));
                return;
            }
            resolve(body);
        });
    });
}
function promisedExtract(buf, extractPath) {
    return new Promise(function (resolve, reject) {
        var stream = unzip.Extract({ path: extractPath });
        stream.on("error", function () {
            reject(new Error("failed to extract zip file"));
        });
        stream.on("close", function () {
            resolve();
        });
        stream.end(buf, "binary");
    });
}
exports.promisedExtract = promisedExtract;
/**
 * ローカルテンプレートディレクトリに存在しなければテンプレートをダウンロード
 */
function downloadTemplateIfNeeded(param) {
    return new Promise(function (resolve, reject) {
        var templatePath = path.join(param._realTemplateDirectory, param.type);
        fs.stat(templatePath, function (err, stats) {
            if (err) {
                if (err.code === "ENOENT") {
                    downloadTemplate(param).then(resolve, reject);
                    return;
                }
                reject(err);
                return;
            }
            resolve();
        });
    });
}
exports.downloadTemplateIfNeeded = downloadTemplateIfNeeded;
//# sourceMappingURL=downloadTemplate.js.map