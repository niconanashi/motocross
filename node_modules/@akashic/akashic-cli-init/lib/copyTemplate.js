"use strict";
var fs = require("fs-extra");
var path = require("path");
/**
 * ローカルテンプレートをカレントディレクトリにコピーする
 */
function copyTemplate(templateConfig, param) {
    return runTemplateConfig(templateConfig, param)
        .then(function () { return getGameJsonPath(templateConfig, param); });
}
exports.copyTemplate = copyTemplate;
/**
 * TemplateConfig に従ってコピーする
 */
function runTemplateConfig(templateConfig, param) {
    var srcDirPath = path.join(param._realTemplateDirectory, param.type);
    var dstDirPath = param.cwd;
    if (templateConfig.files) {
        return Promise.resolve()
            .then(function () { return copyFiles(templateConfig.files, srcDirPath, dstDirPath, param); });
    }
    else {
        return copyAllTemplateFiles(param);
    }
}
/**
 * 指定したファイルをコピーする
 */
function copyFiles(copyFiles, srcDir, dstDir, param) {
    return new Promise(function (resolve, reject) {
        try {
            if (!param.forceCopy) {
                var existFiles_1 = [];
                copyFiles.forEach(function (file) {
                    var destFile = file.dst ? path.join(file.dst, file.src) : file.src;
                    if (fs.existsSync(path.join(dstDir, destFile))) {
                        existFiles_1.push(destFile);
                    }
                });
                if (existFiles_1.length > 0) {
                    var errorMessage = "aborted to copy files, because followings already exist. [" + existFiles_1.join(", ") + "]";
                    reject(new Error(errorMessage));
                    return;
                }
            }
            copyFiles.forEach(function (file) {
                var dest = file.dst || "";
                if (file.src.indexOf("..") !== -1 || (dest.indexOf("..") !== -1))
                    throw (new Error("template.json has an invalid file name"));
                fs.copySync(path.join(srcDir, file.src), path.join(dstDir, dest, file.src), { clobber: param.forceCopy });
                param.logger.info("copied " + file.src + ".");
            });
        }
        catch (err) {
            reject(err);
            return;
        }
        resolve();
    });
}
/**
 * ディレクトリ以下のファイルを単純にコピーする。
 * - ディレクトリ直下の template.json は無視。
 * - ディレクトリ直下に game.json が存在する前提。
 */
function copyAllTemplateFiles(param) {
    return new Promise(function (resolve, reject) {
        var srcDirPath = path.join(param._realTemplateDirectory, param.type);
        var dstDirPath = param.cwd;
        fs.readdir(srcDirPath, function (err, files) {
            if (err) {
                reject(err);
                return;
            }
            if (!param.forceCopy) {
                var existFiles = files.filter(function (fileName) { return fs.existsSync(path.join(dstDirPath, fileName)); });
                if (existFiles.length > 0) {
                    var errorMessage = "aborted to copy files, because followings already exist. [" + existFiles.join(", ") + "]";
                    reject(new Error(errorMessage));
                    return;
                }
            }
            try {
                files.forEach(function (fileName) {
                    var srcPath = path.join(srcDirPath, fileName);
                    var dstPath = path.join(dstDirPath, fileName);
                    if (fileName !== "template.json") {
                        fs.copySync(srcPath, dstPath, { clobber: param.forceCopy });
                        param.logger.info("copied " + fileName + ".");
                    }
                });
            }
            catch (err) {
                reject(new Error("failed to copy template"));
                return;
            }
            // const gameJsonPath = path.join(dstDirPath, "game.json");
            resolve();
        });
    });
}
/**
 * game.json の場所を取得する
 */
function getGameJsonPath(templateConfig, param) {
    var gameJsonPath = path.join(param.cwd, templateConfig.gameJson || "game.json");
    return Promise.resolve(gameJsonPath);
}
//# sourceMappingURL=copyTemplate.js.map