"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var path = require("path");
function invertMap(obj, prop) {
    var ret = {};
    Object.keys(obj).forEach(function (key) {
        var v = prop ? obj[key][prop] : obj[key];
        (ret[v] || (ret[v] = [])).push(key);
    });
    return ret;
}
exports.invertMap = invertMap;
function filterMap(xs, f) {
    var result = [];
    xs.forEach(function (x) {
        var mapped = f(x);
        if (mapped !== undefined)
            result.push(mapped);
    });
    return result;
}
exports.filterMap = filterMap;
function makeModuleNameNoVer(name) {
    var atPos = name.indexOf("@", 1); // 1 は scoped module の prefix 避け
    return (atPos !== -1) ? name.substr(0, atPos) : name;
}
exports.makeModuleNameNoVer = makeModuleNameNoVer;
/**
 * パス文字列の \ を全て / に変換する。
 */
// akashic-cli が扱う game.json 内ではパスはすべて / 区切りなので、
// 環境依存を暗黙に吸収して \ と / を使い分ける path.resolve() が使えない。
function makeUnixPath(path) {
    return path.replace(/\\/g, "/");
}
exports.makeUnixPath = makeUnixPath;
/**
 * カレントディレクトリを変更し、戻すための関数を返す。
 * @param dirpath 設定するカレントディレクトリ
 */
function chdir(dirpath) {
    var cwd = process.cwd();
    process.chdir(dirpath);
    return function (err) {
        process.chdir(cwd);
        return err ? Promise.reject(err) : Promise.resolve();
    };
}
exports.chdir = chdir;
function mkdirpSync(p) {
    p = path.resolve(p);
    try {
        fs.mkdirSync(p);
    }
    catch (e) {
        if (e.code === "ENOENT") {
            mkdirpSync(path.dirname(p));
            mkdirpSync(p);
        }
        else {
            var stat;
            try {
                stat = fs.statSync(p);
            }
            catch (e1) {
                throw e;
            }
            if (!stat.isDirectory())
                throw e;
        }
    }
}
exports.mkdirpSync = mkdirpSync;
