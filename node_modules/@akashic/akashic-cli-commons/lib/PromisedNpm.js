"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ConsoleLogger_1 = require("./ConsoleLogger");
var child_process_1 = require("child_process");
var PromisedNpm = /** @class */ (function () {
    function PromisedNpm(param) {
        this._logger = param.logger || new ConsoleLogger_1.ConsoleLogger();
    }
    PromisedNpm.prototype.install = function (moduleNames) {
        var _this = this;
        if (moduleNames === void 0) { moduleNames = []; }
        return new Promise(function (resolve, reject) {
            _this._logger.info("Installing " + moduleNames + "...");
            child_process_1.exec("npm install --save " + moduleNames.join(" "), function (err) {
                err ? reject(err) : resolve();
            });
        });
    };
    PromisedNpm.prototype.link = function (moduleNames) {
        var _this = this;
        if (moduleNames === void 0) { moduleNames = []; }
        return new Promise(function (resolve, reject) {
            _this._logger.info("Linking " + moduleNames + "...");
            child_process_1.exec("npm link " + moduleNames.join(" "), function (err) {
                err ? reject(err) : resolve();
            });
        });
    };
    PromisedNpm.prototype.uninstall = function (moduleNames) {
        var _this = this;
        if (moduleNames === void 0) { moduleNames = []; }
        return new Promise(function (resolve, reject) {
            _this._logger.info("Uninstalling " + moduleNames + "...");
            child_process_1.exec("npm uninstall --save " + moduleNames.join(" "), function (err) {
                err ? reject(err) : resolve();
            });
        });
    };
    PromisedNpm.prototype.unlink = function (moduleNames) {
        var _this = this;
        if (moduleNames === void 0) { moduleNames = []; }
        return new Promise(function (resolve, reject) {
            _this._logger.info("Unlinking " + moduleNames + "...");
            child_process_1.exec("npm unlink " + moduleNames.join(" "), function (err) {
                err ? reject(err) : resolve();
            });
        });
    };
    PromisedNpm.prototype.shrinkwrap = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this._logger.info("Shrinkwrapping...");
            child_process_1.exec("npm shrinkwrap", function (err) {
                if (err) {
                    reject(err);
                }
                else {
                    _this._logger.info("Added npm-shrinkwrap.json");
                    resolve();
                }
            });
        });
    };
    PromisedNpm.prototype.ls = function (silent) {
        var _this = this;
        if (silent === void 0) { silent = false; }
        return new Promise(function (resolve, reject) {
            _this._logger.info("Listing dependencies ...");
            child_process_1.exec("npm ls --json --production" + (silent ? " --silent" : ""), function (err, stdout, stderr) {
                if (err) {
                    if (stderr.indexOf("extraneous") !== -1) {
                        _this._logger.error("Extraneous module found in node_modules. You must install modules using akashic-cli.");
                    }
                    return reject(err);
                }
                var result = JSON.parse(stdout); // npmから返るstdoutは必ずJSON形式。エラーがある場合はerrとstderrで返される。
                resolve(result);
            });
        });
    };
    PromisedNpm.prototype.update = function (moduleNames) {
        var _this = this;
        if (moduleNames === void 0) { moduleNames = []; }
        return new Promise(function (resolve, reject) {
            _this._logger.info("Update dependencies ...");
            child_process_1.exec("npm update " + moduleNames.join(" "), function (err) {
                err ? reject(err) : resolve();
            });
        });
    };
    return PromisedNpm;
}());
exports.PromisedNpm = PromisedNpm;
