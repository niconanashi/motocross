"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var path = require("path");
var os = require("os");
var ini = require("ini");
var lodashGet = require("lodash.get");
var lodashSet = require("lodash.set");
var lodashUnset = require("lodash.unset");
var AkashicConfigFile = /** @class */ (function () {
    function AkashicConfigFile(validator, configPath) {
        if (configPath === void 0) { configPath = path.join(os.homedir(), ".akashicrc"); }
        this._validator = validator;
        this.data = {};
        this._path = configPath;
    }
    AkashicConfigFile.prototype.load = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            return fs.readFile(_this._path, "utf8", function (err, str) {
                if (err) {
                    if (err.code === "ENOENT") {
                        resolve(); // 設定ファイル未作成状態
                        return;
                    }
                    reject(err);
                    return;
                }
                _this.data = ini.decode(str);
                resolve();
            });
        });
    };
    AkashicConfigFile.prototype.save = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            return fs.writeFile(_this._path, ini.encode(_this.data), function (err) {
                if (err) {
                    reject(err);
                    return;
                }
                resolve();
            });
        });
    };
    AkashicConfigFile.prototype.isValidKey = function (key) {
        return !this._validator || lodashGet(this._validator, key, null) != null;
    };
    AkashicConfigFile.prototype.isValidValue = function (key, value) {
        if (!this._validator)
            return true;
        var reStr = lodashGet(this._validator, key, null);
        if (reStr == null)
            return null;
        return (new RegExp(reStr)).test(value);
    };
    AkashicConfigFile.prototype.getItem = function (key) {
        if (!this.isValidKey(key)) {
            return Promise.reject("invalid key name: " + key);
        }
        return Promise.resolve(lodashGet(this.data, key, null));
    };
    AkashicConfigFile.prototype.setItem = function (key, value) {
        if (!this.isValidKey(key)) {
            return Promise.reject("invalid key name: " + key);
        }
        if (!this.isValidValue(key, value)) {
            return Promise.reject("invalid value: " + value);
        }
        lodashSet(this.data, key, value);
        return Promise.resolve();
    };
    AkashicConfigFile.prototype.deleteItem = function (key) {
        if (!this.isValidKey(key)) {
            return Promise.reject("invalid key name: " + key);
        }
        lodashUnset(this.data, key);
        return Promise.resolve();
    };
    return AkashicConfigFile;
}());
exports.AkashicConfigFile = AkashicConfigFile;
function getConfigItem(validator, key) {
    var config = new AkashicConfigFile(validator);
    return config.load().then(function () { return config.getItem(key); });
}
exports.getConfigItem = getConfigItem;
function setConfigItem(validator, key, value) {
    var config = new AkashicConfigFile(validator);
    return config.load().then(function () { return config.setItem(key, value); }).then(function () { return config.save(); });
}
exports.setConfigItem = setConfigItem;
function deleteConfigItem(validator, key) {
    var config = new AkashicConfigFile(validator);
    return config.load().then(function () { return config.deleteItem(key); }).then(function () { return config.save(); });
}
exports.deleteConfigItem = deleteConfigItem;
function listConfigItems(logger) {
    var config = new AkashicConfigFile({});
    return config.load().then(function () {
        function traverse(data, prefix) {
            if (prefix === void 0) { prefix = ""; }
            Object.keys(data).forEach(function (key) {
                if (typeof data[key] === "object") {
                    traverse(data[key], "" + prefix + key + ".");
                }
                else {
                    logger.print("" + prefix + key + " = " + data[key]);
                }
            });
        }
        traverse(config.data);
    });
}
exports.listConfigItems = listConfigItems;
function listAllConfigItems(logger, validator) {
    var config = new AkashicConfigFile({});
    return config.load().then(function () {
        return Object.keys(validator).forEach(function (key) {
            return logger.print(key + " = " + lodashGet(config.data, key, ""));
        });
    });
}
exports.listAllConfigItems = listAllConfigItems;
