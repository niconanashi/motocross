"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var path = require("path");
var cmn = require("@akashic/akashic-cli-commons");
var fsx = require("fs-extra");
var UglifyJS = require("uglify-js");
var readdir = require("fs-readdir-recursive");
function extractAssetDefinitions(conf, type) {
    var assets = conf._content.assets;
    var assetNames = Object.keys(assets);
    return assetNames.filter(function (assetName) { return assets[assetName].type === type; });
}
exports.extractAssetDefinitions = extractAssetDefinitions;
function copyAssetFilesStrip(inputPath, outputPath, assets, options) {
    options.logger.info("copying stripped fileset...");
    var assetNames = Object.keys(assets);
    assetNames.filter(function (assetName) {
        return assets[assetName].type !== "script" && (options.unbundleText || assets[assetName].type !== "text");
    }).forEach(function (assetName) {
        var assetPath = assets[assetName].path;
        var assetDir = path.dirname(assetPath);
        fsx.mkdirsSync(path.resolve(outputPath, assetDir));
        var dst = path.join(outputPath, assetPath);
        if (assets[assetName].type === "audio") {
            var audioTypes = ["ogg", "mp4", "aac"];
            audioTypes.forEach(function (type) {
                try {
                    fsx.copySync(path.resolve(inputPath, assetPath) + "." + type, dst + "." + type, { overwrite: options.force });
                }
                catch (e) {
                    if (e.code !== "ENOENT") {
                        options.logger.error("Error while copying: " + e.message);
                    }
                }
            });
        }
        else {
            fsx.copySync(path.resolve(inputPath, assetPath), dst, { overwrite: options.force });
        }
    });
}
exports.copyAssetFilesStrip = copyAssetFilesStrip;
function copyAssetFiles(inputPath, outputPath, options) {
    options.logger.info("copying files...");
    var scriptPath = path.resolve(inputPath, "script");
    var textPath = path.resolve(inputPath, "text");
    var isAssetToBeCopied = function (src) {
        return path.relative(scriptPath, src)[0] === "." && (options.unbundleText || path.relative(textPath, src)[0] === ".");
    };
    try {
        var files = readdir(inputPath);
        files.forEach(function (p) {
            cmn.Util.mkdirpSync(path.dirname(path.resolve(outputPath, p)));
            if (isAssetToBeCopied(path.resolve(inputPath, p))) {
                fs.writeFileSync(path.resolve(outputPath, p), fs.readFileSync(path.resolve(inputPath, p)));
            }
        });
    }
    catch (e) {
        options.logger.error("Error while copying: " + e.message);
    }
}
exports.copyAssetFiles = copyAssetFiles;
function encodeText(text) {
    return text.replace(/[\u2028\u2029'"\\\b\f\n\r\t\v%]/g, encodeURIComponent);
}
exports.encodeText = encodeText;
function wrap(code, minify) {
    var PRE_SCRIPT = "(function(exports, require, module, __filename, __dirname) {";
    var POST_SCRIPT = "})(g.module.exports, g.module.require, g.module, g.filename, g.dirname);";
    var ret = PRE_SCRIPT + "\n" + code + "\n" + POST_SCRIPT + "\n";
    return minify ? UglifyJS.minify(ret, { fromString: true }).code : ret;
}
exports.wrap = wrap;
function getDefaultBundleScripts(templatePath, minify, bundleText) {
    if (bundleText === void 0) { bundleText = true; }
    var preloadScriptNames = ["akashic-engine.strip.js", "game-driver.strip.js", "pdi-browser.strip.js"];
    var postloadScriptNames = ["build/LocalScriptAsset.js", "game-storage.strip.js", "logger.js", "sandbox.js", "initGlobals.js"];
    if (bundleText) {
        postloadScriptNames.push("build/LocalTextAsset.js");
    }
    var preloadScripts = preloadScriptNames.map(function (fileName) { return loadScriptFile(fileName, templatePath); });
    var postloadScripts = postloadScriptNames.map(function (fileName) { return loadScriptFile(fileName, templatePath); });
    if (minify) {
        preloadScripts = preloadScripts.map(function (script) { return UglifyJS.minify(script, { fromString: true }).code; });
        postloadScripts = postloadScripts.map(function (script) { return UglifyJS.minify(script, { fromString: true }).code; });
    }
    return {
        preloadScripts: preloadScripts,
        postloadScripts: postloadScripts
    };
}
exports.getDefaultBundleScripts = getDefaultBundleScripts;
function getDefaultBundleStyle(templatePath) {
    var filepath = path.resolve(__dirname, "..", templatePath, "css", "style.css");
    return fs.readFileSync(filepath, "utf8").replace(/\r\n|\r/g, "\n");
}
exports.getDefaultBundleStyle = getDefaultBundleStyle;
function getInjectedContents(baseDir, injects) {
    var injectedContents = [];
    for (var i = 0; i < injects.length; i++) {
        var filePath = path.join(baseDir, injects[i]);
        if (fs.statSync(filePath).isDirectory()) {
            injectedContents = injectedContents.concat(getFileContentsFromDirectory(filePath));
        }
        else {
            injectedContents.push(fs.readFileSync(filePath, "utf8").replace(/\r\n|\r/g, "\n"));
        }
    }
    return injectedContents;
}
exports.getInjectedContents = getInjectedContents;
function validateEs5Code(fileName, code) {
    return cmn.LintUtil.validateEs5Code(code)
        .map(function (info) { return fileName + "(" + info.line + ":" + info.column + "): " + info.message; });
}
exports.validateEs5Code = validateEs5Code;
function getFileContentsFromDirectory(inputDirPath) {
    return fs.readdirSync(inputDirPath)
        .map(function (fileName) { return fs.readFileSync(path.join(inputDirPath, fileName), "utf8").replace(/\r\n|\r/g, "\n"); });
}
function loadScriptFile(fileName, templatePath) {
    try {
        var filepath = path.resolve(__dirname, "..", templatePath, "js", fileName);
        return fs.readFileSync(filepath, "utf8").replace(/\r\n|\r/g, "\n");
    }
    catch (e) {
        if (e.code === "ENOENT") {
            throw new Error(fileName + " is not found. Try re-install akashic-cli" + path.resolve(__dirname, "..", templatePath, fileName));
        }
        else {
            throw e;
        }
    }
}
