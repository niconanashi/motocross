"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
var cmn = require("@akashic/akashic-cli-commons");
var Configuration_1 = require("./Configuration");
function _completeUninstallParameterObject(param) {
    param.moduleNames = param.moduleNames || [];
    param.unlink = !!param.unlink;
    param.plugin = !!param.plugin;
    param.cwd = param.cwd || process.cwd();
    param.logger = param.logger || new cmn.ConsoleLogger();
}
exports._completeUninstallParameterObject = _completeUninstallParameterObject;
function promiseUninstall(param) {
    _completeUninstallParameterObject(param);
    var npm = param.debugNpm || new cmn.PromisedNpm({ logger: param.logger });
    if (param.plugin && param.moduleNames.length > 1) {
        return Promise.reject(new Error("'plugin' option cannot be used with multiple module uninstalling/unlinking."));
    }
    var restoreDirectory = cmn.Util.chdir(param.cwd);
    var gameJsonPath = path.join(process.cwd(), "game.json");
    return Promise.resolve()
        .then(function () { return cmn.ConfigurationFile.read(gameJsonPath, param.logger); })
        .then(function (content) {
        return Promise.resolve()
            .then(function () {
            if (param.unlink) {
                return npm.unlink(param.moduleNames);
            }
            else {
                return Promise.resolve()
                    .then(function () { return npm.uninstall(param.moduleNames); })
                    .then(function () { return npm.shrinkwrap(); });
            }
        })
            .then(function () {
            var conf = new Configuration_1.Configuration({ content: content, logger: param.logger });
            if (param.plugin)
                conf.removeOperationPlugin(param.moduleNames[0]);
            conf.vacuumGlobalScripts();
            var globalScripts = conf._content.globalScripts;
            var packageJsons = cmn.NodeModules.listPackageJsonsFromScriptsPath(".", globalScripts);
            var moduleMainScripts = cmn.NodeModules.listModuleMainScripts(packageJsons);
            if (moduleMainScripts && Object.keys(moduleMainScripts).length > 0) {
                conf._content.moduleMainScripts = moduleMainScripts;
            }
            else {
                delete conf._content.moduleMainScripts;
            }
            return cmn.ConfigurationFile.write(conf.getContent(), gameJsonPath, param.logger);
        });
    })
        .then(restoreDirectory, restoreDirectory)
        .then(function () { return param.logger.info("Done!"); });
}
exports.promiseUninstall = promiseUninstall;
function uninstall(param, cb) {
    promiseUninstall(param).then(cb, cb);
}
exports.uninstall = uninstall;
