"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var path = require("path");
var FileType;
(function (FileType) {
    FileType[FileType["Ogg"] = 0] = "Ogg";
    FileType[FileType["Mp4"] = 1] = "Mp4";
    FileType[FileType["Aac"] = 2] = "Aac";
})(FileType || (FileType = {}));
var SizeResult = /** @class */ (function () {
    function SizeResult() {
        this.imageSize = 0;
        this.textSize = 0;
        this.oggAudioSize = 0;
        this.mp4AudioSize = 0;
        this.aacAudioSize = 0;
        this.scriptSize = 0;
        this.otherSize = 0;
        this.otherDetail = {};
    }
    SizeResult.prototype.totalSizeOgg = function () {
        return this.imageSize + this.textSize +
            this.oggAudioSize + this.scriptSize + this.otherSize;
    };
    SizeResult.prototype.totalSizeAac = function () {
        return this.imageSize + this.textSize +
            this.aacAudioSize + this.scriptSize + this.otherSize;
    };
    SizeResult.prototype.totalSizeMp4 = function () {
        return this.imageSize + this.textSize +
            this.mp4AudioSize + this.scriptSize + this.otherSize;
    };
    SizeResult.prototype.sumOfTable = function () {
        var _this = this;
        var sum = 0;
        Object.keys(this.otherDetail).forEach(function (key) {
            return sum += _this.otherDetail[key];
        });
        return sum;
    };
    return SizeResult;
}());
function size(param) {
    var sizeResult = new SizeResult();
    return Promise.resolve()
        .then(function () { return sizeOfGame(param, sizeResult); })
        .then(function () { return showSize(param, sizeResult); })
        .then(function () { return checkLimit(param, sizeResult); });
}
exports.size = size;
/**
 * サイズの計測結果を表示する
 */
function showSize(param, sizeResult) {
    var largestFileType;
    var totalSize;
    if (sizeResult.oggAudioSize > sizeResult.aacAudioSize && sizeResult.oggAudioSize > sizeResult.mp4AudioSize) {
        largestFileType = FileType.Ogg;
        totalSize = sizeResult.totalSizeOgg();
    }
    else if (sizeResult.mp4AudioSize > sizeResult.aacAudioSize) {
        largestFileType = FileType.Mp4;
        totalSize = sizeResult.totalSizeMp4();
    }
    else {
        largestFileType = FileType.Aac;
        totalSize = sizeResult.totalSizeAac();
    }
    if (!param.raw) {
        var persent_1 = function (value) { return (value / totalSize * 100).toFixed(0); };
        var formatSize = function (name, size) { return name + ": " + sizeToString(size) + " (" + persent_1(size) + "%)"; };
        param.logger.print(formatSize("image", sizeResult.imageSize));
        param.logger.print(formatSize("text", sizeResult.textSize));
        switch (largestFileType) {
            case FileType.Ogg:
                param.logger.print(formatSize("ogg audio", sizeResult.oggAudioSize));
                param.logger.print("mp4 audio: " + sizeToString(sizeResult.mp4AudioSize));
                if (sizeResult.aacAudioSize > 0)
                    param.logger.print("aac audio: " + sizeToString(sizeResult.aacAudioSize));
                break;
            case FileType.Mp4:
                param.logger.print("ogg audio: " + sizeToString(sizeResult.oggAudioSize));
                param.logger.print(formatSize("mp4 audio", sizeResult.mp4AudioSize));
                if (sizeResult.aacAudioSize > 0)
                    param.logger.print("aac audio: " + sizeToString(sizeResult.aacAudioSize));
                break;
            case FileType.Aac:
                param.logger.print("ogg audio: " + sizeToString(sizeResult.oggAudioSize));
                param.logger.print("mp4 audio: " + sizeToString(sizeResult.mp4AudioSize));
                if (sizeResult.aacAudioSize > 0)
                    param.logger.print(formatSize("aac audio", sizeResult.aacAudioSize));
                break;
            default:
                throw new Error("Audio file size retrieve failed.");
        }
        param.logger.print(formatSize("script", sizeResult.scriptSize));
        param.logger.print(formatSize("other", sizeResult.otherSize));
        Object.keys(sizeResult.otherDetail).forEach(function (key) {
            return param.logger.print("  " + key + ": " + sizeToString(sizeResult.otherDetail[key]));
        });
        var mark = function (enabled) { return enabled ? "[*]" : "[ ]"; };
        param.logger.print(mark(largestFileType === FileType.Ogg) + " TOTAL SIZE (using ogg): " +
            sizeToString(sizeResult.totalSizeOgg()) +
            (" (" + sizeResult.totalSizeOgg() + "B)"));
        param.logger.print(mark(largestFileType === FileType.Mp4) + " TOTAL SIZE (using mp4): " +
            sizeToString(sizeResult.totalSizeMp4()) +
            (" (" + sizeResult.totalSizeMp4() + "B)"));
        if (sizeResult.aacAudioSize > 0) {
            param.logger.print(mark(largestFileType === FileType.Aac) + " TOTAL SIZE (using aac): " +
                sizeToString(sizeResult.totalSizeAac()) +
                (" (" + sizeResult.totalSizeAac() + "B)"));
            param.logger.warn("AAC (.aac) is deprecated. Use MP4(AAC) (.mp4) instead.");
        }
    }
    else {
        param.logger.print(totalSize.toString());
    }
}
/**
 * サイズの制限を超えていないことを確認する
 */
function checkLimit(param, sizeResult) {
    if (param.limit == null) {
        return Promise.resolve();
    }
    var limitSize = parseSize(param.limit);
    if (limitSize == null) {
        return Promise.reject("cannot parse limit size value");
    }
    var actualSize = Math.max(sizeResult.totalSizeOgg(), sizeResult.totalSizeMp4(), sizeResult.totalSizeAac());
    if (actualSize > limitSize) {
        return Promise.reject("file size limit exceeded (" + sizeToString(actualSize - limitSize) + ")");
    }
    return Promise.resolve();
}
/**
 * ゲーム全体のサイズを調べる
 */
function sizeOfGame(param, sizeResult) {
    return sizeOfGameJson(param, sizeResult)
        .then(function () { return sequencePromise(sizeOfAssets(param, sizeResult)); })
        .then(function () { return sequencePromise(sizeOfGlobalScripts(param, sizeResult)); });
}
/**
 * game.json のサイズを調べる
 */
function sizeOfGameJson(param, sizeResult) {
    return fileSize(path.join(param.basepath, "game.json"))
        .then(function (size) {
        sizeResult.otherSize += size;
        sizeResult.otherDetail["game.json"] = size;
    });
}
/**
 * asset のサイズを調べる
 */
function sizeOfAssets(param, sizeResult) {
    if (param.game.assets == null)
        return [];
    return Object.keys(param.game.assets).map(function (key) {
        var asset = param.game.assets[key];
        switch (asset.type) {
            case "image":
                return fileSize(path.join(param.basepath, asset.path))
                    .then(function (size) { sizeResult.imageSize += size; });
            case "text":
                return fileSize(path.join(param.basepath, asset.path))
                    .then(function (size) { sizeResult.textSize += size; });
            case "script":
                return fileSize(path.join(param.basepath, asset.path))
                    .then(function (size) { sizeResult.scriptSize += size; });
            case "audio":
                return fileSize(path.join(param.basepath, asset.path + ".ogg"))
                    .then(function (size) { sizeResult.oggAudioSize += size; }, function () { if (!param.raw)
                    param.logger.warn(asset.path + ".ogg, No such file."); })
                    .then(function () { return fileSize(path.join(param.basepath, asset.path + ".mp4")); })
                    .then(function (size) { sizeResult.mp4AudioSize += size; }, function () { if (!param.raw)
                    param.logger.warn(asset.path + ".mp4, No such file."); })
                    .then(function () { return fileSize(path.join(param.basepath, asset.path + ".aac")); })
                    .then(function (size) { sizeResult.aacAudioSize += size; }, function () { });
            default:
                throw new Error(asset.type + " is not a valid asset type name");
        }
    });
}
/**
 * globalScript のサイズを調べる
 */
function sizeOfGlobalScripts(param, sizeResult) {
    if (param.game.globalScripts == null)
        return [];
    return param.game.globalScripts.map(function (filePath) {
        return fileSize(path.join(param.basepath, filePath))
            .then(function (size) {
            sizeResult.otherSize += size;
            var key = getModuleName(filePath);
            var oldValue = sizeResult.otherDetail[key] || 0;
            sizeResult.otherDetail[key] = oldValue + size;
        });
    });
}
/**
 * ファイルのパスから表示用のモジュール名を取り出す
 */
function getModuleName(filePath) {
    var result = /^node_modules\/((@(\w|-)+\/)?(\w|-)+)\//.exec(filePath);
    if (result && typeof result[1] === "string") {
        return result[1];
    }
    else {
        return filePath;
    }
}
/**
 * プロミスを直列化する
 */
function sequencePromise(promises) {
    return promises.reduce(function (p0, p) { return p0.then(function () { return p; }); }, Promise.resolve());
}
/**
 * ファイルのサイズを返す
 */
function fileSize(fullPath) {
    return new Promise(function (resolve, reject) {
        fs.stat(fullPath, function (err, result) {
            if (err) {
                reject(err);
            }
            else {
                resolve(result.size);
            }
        });
    });
}
/**
 * サイズを表す文字列をバイト数に変換
 * 例: "100KB" -> 102400
 */
function parseSize(str) {
    var result = /^(\d+)([KMG]?)B?$/i.exec(str);
    if (result == null) {
        return null;
    }
    if (result[2]) {
        return parseInt(result[1], 10) * siUnitPrefix(result[2]);
    }
    else {
        return parseInt(result[1], 10);
    }
}
/**
 * バイト数を人間が分かりやすい文字列に変換
 */
function sizeToString(size) {
    var list = ["G", "M", "K"];
    for (var i = 0; i < list.length; ++i) {
        var value = siUnitPrefix(list[i]);
        if (size >= value) {
            return (size / value).toFixed(2) + list[i] + "B";
        }
    }
    return size + "B";
}
/**
 * SI接頭辞の乗数
 */
function siUnitPrefix(prefix) {
    var map = {
        k: 1024,
        m: 1024 * 1024,
        g: 1024 * 1024 * 1024
    };
    var value = map[prefix.toLowerCase()];
    if (value == null) {
        throw new Error("unknown si unit prefix");
    }
    return value;
}
