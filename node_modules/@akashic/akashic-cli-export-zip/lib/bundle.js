"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var path = require("path");
var os = require("os");
var cmn = require("@akashic/akashic-cli-commons");
var archiver = require("archiver");
var readdir = require("fs-readdir-recursive");
var convert_1 = require("./convert");
function _completeExportZipParameterObject(param) {
    param.bundle = !!param.bundle;
    param.minify = !!param.minify;
    param.strip = !!param.strip;
    param.source = param.source || process.cwd();
    param.dest = param.dest || "./game.zip";
    param.logger = param.logger || new cmn.ConsoleLogger();
}
exports._completeExportZipParameterObject = _completeExportZipParameterObject;
function promiseExportZip(param) {
    _completeExportZipParameterObject(param);
    var outZip = /\.zip$/.test(param.dest);
    var destDir = outZip ? fs.mkdtempSync(path.join(os.tmpdir(), "akashic-export-zip-")) : param.dest;
    return convert_1.convertGame({
        bundle: param.bundle,
        minify: param.minify,
        strip: param.strip,
        source: param.source,
        dest: destDir,
        hashLength: param.hashLength,
        logger: param.logger
    })
        .then(function () {
        if (!outZip)
            return;
        return new Promise(function (resolve, reject) {
            var files = readdir(destDir).map(function (p) { return ({
                src: path.resolve(destDir, p),
                dest: path.join("game", path.dirname(p)),
                expand: true,
                flatten: true
            }); });
            var ostream = fs.createWriteStream(param.dest);
            var archive = archiver("zip");
            ostream.on("close", function () { return resolve(); });
            archive.on("error", function (err) { return reject(err); });
            archive.pipe(ostream);
            archive.bulk(files);
            archive.finalize();
        });
        // TODO mkdtempのフォルダを削除すべき？
    })
        .then(function () { return param.logger.info("Done!"); });
}
exports.promiseExportZip = promiseExportZip;
