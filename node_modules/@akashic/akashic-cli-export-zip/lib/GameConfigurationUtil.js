"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var path = require("path");
function removeScriptFromFilePaths(gamejson, filePaths) {
    var table = {};
    filePaths.forEach(function (p) { return table[p] = true; });
    var assets = {};
    Object.keys(gamejson.assets).forEach(function (aid) {
        var a = gamejson.assets[aid];
        if (a.type === "script" && table.hasOwnProperty(a.path))
            return;
        assets[aid] = gamejson.assets[aid];
    });
    gamejson.assets = assets;
    if (gamejson.globalScripts)
        gamejson.globalScripts = gamejson.globalScripts.filter(function (p) { return !table.hasOwnProperty(p); });
}
exports.removeScriptFromFilePaths = removeScriptFromFilePaths;
function makeScriptAssetPath(filename) {
    return "script/" + filename + ".js";
}
exports.makeScriptAssetPath = makeScriptAssetPath;
function findUniqueScriptAssetName(gamejson, prefix) {
    var idTable = {};
    var pathTable = {};
    Object.keys(gamejson.assets).forEach(function (aid) { return (idTable[aid] = pathTable[gamejson.assets[aid].path] = true); });
    (gamejson.globalScripts || []).forEach(function (p) { return (idTable[p] = pathTable[p] = true); });
    if (!idTable.hasOwnProperty(prefix) && !pathTable.hasOwnProperty(makeScriptAssetPath(prefix)))
        return prefix;
    var i = 0;
    while (idTable.hasOwnProperty(prefix + i) || pathTable.hasOwnProperty(makeScriptAssetPath(prefix + i)))
        ++i;
    return prefix + i;
}
exports.findUniqueScriptAssetName = findUniqueScriptAssetName;
function addScriptAsset(gamejson, prefix) {
    var aid = findUniqueScriptAssetName(gamejson, prefix);
    var filePath = makeScriptAssetPath(aid);
    gamejson.assets[aid] = {
        type: "script",
        global: true,
        path: filePath
    };
    return filePath;
}
exports.addScriptAsset = addScriptAsset;
function makeUniqueAssetPath(gamejson, assetPath) {
    var targetAssetPath = assetPath;
    var targetDirName = path.dirname(assetPath);
    var targetExtName = path.extname(assetPath);
    var targetFileNamePrefix = path.basename(assetPath, targetExtName);
    var assetIds = Object.keys(gamejson.assets);
    for (var index = 0; assetIds.some(function (aid) { return gamejson.assets[aid].path === targetAssetPath; }); index++) {
        targetAssetPath = path.join(targetDirName, targetFileNamePrefix + index + targetExtName);
    }
    return targetAssetPath;
}
exports.makeUniqueAssetPath = makeUniqueAssetPath;
function extractFilePaths(gamejson, basedir) {
    var result = [];
    Object.keys(gamejson.assets).forEach(function (aid) {
        var a = gamejson.assets[aid];
        if (a.type !== "audio") {
            result.push(a.path);
            return;
        }
        // audio のみ拡張子を補完する特殊対応: 補完して存在するファイルのみ扱う
        [".ogg", ".aac", ".mp4"].forEach(function (ext) {
            try {
                if (fs.statSync(path.resolve(basedir, a.path + ext)).isFile())
                    result.push(a.path + ext);
            }
            catch (e) {
                // do nothing.
            }
        });
    });
    (gamejson.globalScripts || []).forEach(function (p) { return result.push(p); });
    return result;
}
exports.extractFilePaths = extractFilePaths;
function extractScriptAssetFilePaths(gamejson) {
    var result = [];
    Object.keys(gamejson.assets).forEach(function (aid) { return (gamejson.assets[aid].type === "script") && result.push(gamejson.assets[aid].path); });
    (gamejson.globalScripts || []).forEach(function (p) { return (/\.js$/.test(p)) && result.push(p); });
    return result;
}
exports.extractScriptAssetFilePaths = extractScriptAssetFilePaths;
