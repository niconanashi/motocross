"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var fsx = require("fs-extra");
var path = require("path");
var cmn = require("@akashic/akashic-cli-commons");
var browserify = require("browserify");
var readdir = require("fs-readdir-recursive");
var gcu = require("./GameConfigurationUtil");
var UglifyJS = require("uglify-js");
function _completeConvertGameParameterObject(param) {
    param.bundle = !!param.bundle;
    param.minify = !!param.minify;
    param.strip = !!param.strip;
    param.source = param.source || process.cwd();
    param.hashLength = param.hashLength || 0;
    param.logger = param.logger || new cmn.ConsoleLogger();
}
exports._completeConvertGameParameterObject = _completeConvertGameParameterObject;
function bundleScripts(entryPoint, basedir) {
    var b = browserify({
        entries: entryPoint,
        basedir: basedir,
        builtins: false,
        standalone: "aez_bundle_main"
    });
    b.external("g");
    var filePaths = [];
    b.on("dep", function (row) {
        filePaths.push(cmn.Util.makeUnixPath(path.relative(basedir, row.file)));
    });
    return new Promise(function (resolve, reject) {
        b.bundle(function (err, buf) {
            if (err)
                return reject(err);
            resolve({ bundle: buf.toString(), filePaths: filePaths });
        });
    });
}
exports.bundleScripts = bundleScripts;
function convertGame(param) {
    _completeConvertGameParameterObject(param);
    var gamejson;
    cmn.Util.mkdirpSync(path.dirname(path.resolve(param.dest)));
    return Promise.resolve()
        .then(function () { return cmn.ConfigurationFile.read(path.join(param.source, "game.json"), param.logger); })
        .then(function (result) {
        gamejson = result;
        // 全スクリプトがES5構文になっていることを確認する
        var errorMessages = [];
        gcu.extractScriptAssetFilePaths(gamejson).forEach(function (filePath) {
            var code = fs.readFileSync(path.resolve(param.source, filePath)).toString();
            errorMessages = errorMessages.concat(cmn.LintUtil.validateEs5Code(code).map(function (info) { return filePath + "(" + info.line + ":" + info.column + "): " + info.message; }));
        });
        if (errorMessages.length > 0) {
            param.logger.warn("The following ES5 syntax errors exist.\n" + errorMessages.join("\n"));
        }
        if (!param.bundle)
            return null;
        return bundleScripts(gamejson.main || gamejson.assets.mainScene.path, param.source);
    })
        .then(function (bundleResult) {
        var noCopyingFilePaths = new Set();
        if (bundleResult) {
            gcu.removeScriptFromFilePaths(gamejson, bundleResult.filePaths);
            noCopyingFilePaths = new Set(bundleResult.filePaths);
        }
        var files = param.strip ? gcu.extractFilePaths(gamejson, param.source) : readdir(param.source);
        files.forEach(function (p) {
            if (!noCopyingFilePaths.has(p)) {
                cmn.Util.mkdirpSync(path.dirname(path.resolve(param.dest, p)));
                fs.writeFileSync(path.resolve(param.dest, p), fs.readFileSync(path.resolve(param.source, p)));
            }
        });
        if (bundleResult === null) {
            return;
        }
        var entryPointPath;
        if (!!gamejson.main) {
            entryPointPath = gcu.addScriptAsset(gamejson, "aez_bundle_main");
            gamejson.main = "./" + entryPointPath;
        }
        else {
            entryPointPath = gcu.makeUniqueAssetPath(gamejson, "script/mainScene.js");
            gamejson.assets["mainScene"] = {
                type: "script",
                global: true,
                path: entryPointPath
            };
        }
        var entryPointAbsPath = path.resolve(param.dest, entryPointPath);
        cmn.Util.mkdirpSync(path.dirname(entryPointAbsPath));
        fs.writeFileSync(entryPointAbsPath, bundleResult.bundle);
    })
        .then(function () {
        if (param.hashLength > 0) {
            var hashLength = Math.ceil(param.hashLength);
            try {
                cmn.Renamer.renameAssetFilenames(gamejson, param.dest, hashLength);
            }
            catch (error) {
                // ファイル名のハッシュ化に失敗した場合、throwして作業中のコピー先ファイルを削除する
                fsx.removeSync(path.resolve(param.dest));
                if (error.message === cmn.Renamer.ERROR_FILENAME_CONFLICT) {
                    throw new Error("Hashed filename conflict. Use larger hash-filename param on command line.");
                }
                throw error;
            }
        }
        return cmn.ConfigurationFile.write(gamejson, path.resolve(param.dest, "game.json"), param.logger);
    })
        .then(function () {
        if (!param.minify)
            return;
        var scriptAssetPaths = gcu.extractScriptAssetFilePaths(gamejson).map(function (p) { return path.resolve(param.dest, p); });
        scriptAssetPaths.forEach(function (p) {
            fs.writeFileSync(p, UglifyJS.minify(p).code);
        });
    });
}
exports.convertGame = convertGame;
